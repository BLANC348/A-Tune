// Code generated by protoc-gen-go. DO NOT EDIT.
// source: profile.proto

package profile

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ListMessage struct {
	WorkloadType         string   `protobuf:"bytes,1,opt,name=WorkloadType,proto3" json:"WorkloadType,omitempty"`
	ProfileNames         string   `protobuf:"bytes,2,opt,name=ProfileNames,proto3" json:"ProfileNames,omitempty"`
	Active               string   `protobuf:"bytes,3,opt,name=Active,proto3" json:"Active,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListMessage) Reset()         { *m = ListMessage{} }
func (m *ListMessage) String() string { return proto.CompactTextString(m) }
func (*ListMessage) ProtoMessage()    {}
func (*ListMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_744bf7a47b381504, []int{0}
}

func (m *ListMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListMessage.Unmarshal(m, b)
}
func (m *ListMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListMessage.Marshal(b, m, deterministic)
}
func (m *ListMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListMessage.Merge(m, src)
}
func (m *ListMessage) XXX_Size() int {
	return xxx_messageInfo_ListMessage.Size(m)
}
func (m *ListMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ListMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ListMessage proto.InternalMessageInfo

func (m *ListMessage) GetWorkloadType() string {
	if m != nil {
		return m.WorkloadType
	}
	return ""
}

func (m *ListMessage) GetProfileNames() string {
	if m != nil {
		return m.ProfileNames
	}
	return ""
}

func (m *ListMessage) GetActive() string {
	if m != nil {
		return m.Active
	}
	return ""
}

type ProfileInfo struct {
	Name                 string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Content              []byte   `protobuf:"bytes,2,opt,name=Content,proto3" json:"Content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProfileInfo) Reset()         { *m = ProfileInfo{} }
func (m *ProfileInfo) String() string { return proto.CompactTextString(m) }
func (*ProfileInfo) ProtoMessage()    {}
func (*ProfileInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_744bf7a47b381504, []int{1}
}

func (m *ProfileInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProfileInfo.Unmarshal(m, b)
}
func (m *ProfileInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProfileInfo.Marshal(b, m, deterministic)
}
func (m *ProfileInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProfileInfo.Merge(m, src)
}
func (m *ProfileInfo) XXX_Size() int {
	return xxx_messageInfo_ProfileInfo.Size(m)
}
func (m *ProfileInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ProfileInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ProfileInfo proto.InternalMessageInfo

func (m *ProfileInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ProfileInfo) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

type AnalysisMessage struct {
	Name                 string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Model                string   `protobuf:"bytes,2,opt,name=Model,proto3" json:"Model,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AnalysisMessage) Reset()         { *m = AnalysisMessage{} }
func (m *AnalysisMessage) String() string { return proto.CompactTextString(m) }
func (*AnalysisMessage) ProtoMessage()    {}
func (*AnalysisMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_744bf7a47b381504, []int{2}
}

func (m *AnalysisMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AnalysisMessage.Unmarshal(m, b)
}
func (m *AnalysisMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AnalysisMessage.Marshal(b, m, deterministic)
}
func (m *AnalysisMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AnalysisMessage.Merge(m, src)
}
func (m *AnalysisMessage) XXX_Size() int {
	return xxx_messageInfo_AnalysisMessage.Size(m)
}
func (m *AnalysisMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_AnalysisMessage.DiscardUnknown(m)
}

var xxx_messageInfo_AnalysisMessage proto.InternalMessageInfo

func (m *AnalysisMessage) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AnalysisMessage) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

type Ack struct {
	Status               string   `protobuf:"bytes,1,opt,name=Status,proto3" json:"Status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ack) Reset()         { *m = Ack{} }
func (m *Ack) String() string { return proto.CompactTextString(m) }
func (*Ack) ProtoMessage()    {}
func (*Ack) Descriptor() ([]byte, []int) {
	return fileDescriptor_744bf7a47b381504, []int{3}
}

func (m *Ack) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ack.Unmarshal(m, b)
}
func (m *Ack) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ack.Marshal(b, m, deterministic)
}
func (m *Ack) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ack.Merge(m, src)
}
func (m *Ack) XXX_Size() int {
	return xxx_messageInfo_Ack.Size(m)
}
func (m *Ack) XXX_DiscardUnknown() {
	xxx_messageInfo_Ack.DiscardUnknown(m)
}

var xxx_messageInfo_Ack proto.InternalMessageInfo

func (m *Ack) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type AckCheck struct {
	Name                 string   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Status               string   `protobuf:"bytes,2,opt,name=Status,proto3" json:"Status,omitempty"`
	Description          string   `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AckCheck) Reset()         { *m = AckCheck{} }
func (m *AckCheck) String() string { return proto.CompactTextString(m) }
func (*AckCheck) ProtoMessage()    {}
func (*AckCheck) Descriptor() ([]byte, []int) {
	return fileDescriptor_744bf7a47b381504, []int{4}
}

func (m *AckCheck) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AckCheck.Unmarshal(m, b)
}
func (m *AckCheck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AckCheck.Marshal(b, m, deterministic)
}
func (m *AckCheck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AckCheck.Merge(m, src)
}
func (m *AckCheck) XXX_Size() int {
	return xxx_messageInfo_AckCheck.Size(m)
}
func (m *AckCheck) XXX_DiscardUnknown() {
	xxx_messageInfo_AckCheck.DiscardUnknown(m)
}

var xxx_messageInfo_AckCheck proto.InternalMessageInfo

func (m *AckCheck) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AckCheck) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *AckCheck) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type ProfileLog struct {
	Id                   int64    `protobuf:"varint,1,opt,name=Id,proto3" json:"Id,omitempty"`
	ProfileId            string   `protobuf:"bytes,2,opt,name=ProfileId,proto3" json:"ProfileId,omitempty"`
	Timestamp            string   `protobuf:"bytes,3,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProfileLog) Reset()         { *m = ProfileLog{} }
func (m *ProfileLog) String() string { return proto.CompactTextString(m) }
func (*ProfileLog) ProtoMessage()    {}
func (*ProfileLog) Descriptor() ([]byte, []int) {
	return fileDescriptor_744bf7a47b381504, []int{5}
}

func (m *ProfileLog) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProfileLog.Unmarshal(m, b)
}
func (m *ProfileLog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProfileLog.Marshal(b, m, deterministic)
}
func (m *ProfileLog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProfileLog.Merge(m, src)
}
func (m *ProfileLog) XXX_Size() int {
	return xxx_messageInfo_ProfileLog.Size(m)
}
func (m *ProfileLog) XXX_DiscardUnknown() {
	xxx_messageInfo_ProfileLog.DiscardUnknown(m)
}

var xxx_messageInfo_ProfileLog proto.InternalMessageInfo

func (m *ProfileLog) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ProfileLog) GetProfileId() string {
	if m != nil {
		return m.ProfileId
	}
	return ""
}

func (m *ProfileLog) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

type CollectFlag struct {
	Interval             int64    `protobuf:"varint,1,opt,name=Interval,proto3" json:"Interval,omitempty"`
	Duration             int64    `protobuf:"varint,2,opt,name=Duration,proto3" json:"Duration,omitempty"`
	Workload             string   `protobuf:"bytes,3,opt,name=Workload,proto3" json:"Workload,omitempty"`
	OutputPath           string   `protobuf:"bytes,4,opt,name=OutputPath,proto3" json:"OutputPath,omitempty"`
	Block                string   `protobuf:"bytes,5,opt,name=Block,proto3" json:"Block,omitempty"`
	Network              string   `protobuf:"bytes,6,opt,name=Network,proto3" json:"Network,omitempty"`
	Type                 string   `protobuf:"bytes,7,opt,name=Type,proto3" json:"Type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CollectFlag) Reset()         { *m = CollectFlag{} }
func (m *CollectFlag) String() string { return proto.CompactTextString(m) }
func (*CollectFlag) ProtoMessage()    {}
func (*CollectFlag) Descriptor() ([]byte, []int) {
	return fileDescriptor_744bf7a47b381504, []int{6}
}

func (m *CollectFlag) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CollectFlag.Unmarshal(m, b)
}
func (m *CollectFlag) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CollectFlag.Marshal(b, m, deterministic)
}
func (m *CollectFlag) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CollectFlag.Merge(m, src)
}
func (m *CollectFlag) XXX_Size() int {
	return xxx_messageInfo_CollectFlag.Size(m)
}
func (m *CollectFlag) XXX_DiscardUnknown() {
	xxx_messageInfo_CollectFlag.DiscardUnknown(m)
}

var xxx_messageInfo_CollectFlag proto.InternalMessageInfo

func (m *CollectFlag) GetInterval() int64 {
	if m != nil {
		return m.Interval
	}
	return 0
}

func (m *CollectFlag) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *CollectFlag) GetWorkload() string {
	if m != nil {
		return m.Workload
	}
	return ""
}

func (m *CollectFlag) GetOutputPath() string {
	if m != nil {
		return m.OutputPath
	}
	return ""
}

func (m *CollectFlag) GetBlock() string {
	if m != nil {
		return m.Block
	}
	return ""
}

func (m *CollectFlag) GetNetwork() string {
	if m != nil {
		return m.Network
	}
	return ""
}

func (m *CollectFlag) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

type TrainMessage struct {
	DataPath             string   `protobuf:"bytes,1,opt,name=DataPath,proto3" json:"DataPath,omitempty"`
	OutputPath           string   `protobuf:"bytes,2,opt,name=OutputPath,proto3" json:"OutputPath,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TrainMessage) Reset()         { *m = TrainMessage{} }
func (m *TrainMessage) String() string { return proto.CompactTextString(m) }
func (*TrainMessage) ProtoMessage()    {}
func (*TrainMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_744bf7a47b381504, []int{7}
}

func (m *TrainMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TrainMessage.Unmarshal(m, b)
}
func (m *TrainMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TrainMessage.Marshal(b, m, deterministic)
}
func (m *TrainMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrainMessage.Merge(m, src)
}
func (m *TrainMessage) XXX_Size() int {
	return xxx_messageInfo_TrainMessage.Size(m)
}
func (m *TrainMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_TrainMessage.DiscardUnknown(m)
}

var xxx_messageInfo_TrainMessage proto.InternalMessageInfo

func (m *TrainMessage) GetDataPath() string {
	if m != nil {
		return m.DataPath
	}
	return ""
}

func (m *TrainMessage) GetOutputPath() string {
	if m != nil {
		return m.OutputPath
	}
	return ""
}

type DefineMessage struct {
	ServiceType          string   `protobuf:"bytes,1,opt,name=ServiceType,proto3" json:"ServiceType,omitempty"`
	ApplicationName      string   `protobuf:"bytes,2,opt,name=ApplicationName,proto3" json:"ApplicationName,omitempty"`
	ScenarioName         string   `protobuf:"bytes,3,opt,name=ScenarioName,proto3" json:"ScenarioName,omitempty"`
	Content              []byte   `protobuf:"bytes,4,opt,name=Content,proto3" json:"Content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DefineMessage) Reset()         { *m = DefineMessage{} }
func (m *DefineMessage) String() string { return proto.CompactTextString(m) }
func (*DefineMessage) ProtoMessage()    {}
func (*DefineMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_744bf7a47b381504, []int{8}
}

func (m *DefineMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DefineMessage.Unmarshal(m, b)
}
func (m *DefineMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DefineMessage.Marshal(b, m, deterministic)
}
func (m *DefineMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DefineMessage.Merge(m, src)
}
func (m *DefineMessage) XXX_Size() int {
	return xxx_messageInfo_DefineMessage.Size(m)
}
func (m *DefineMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_DefineMessage.DiscardUnknown(m)
}

var xxx_messageInfo_DefineMessage proto.InternalMessageInfo

func (m *DefineMessage) GetServiceType() string {
	if m != nil {
		return m.ServiceType
	}
	return ""
}

func (m *DefineMessage) GetApplicationName() string {
	if m != nil {
		return m.ApplicationName
	}
	return ""
}

func (m *DefineMessage) GetScenarioName() string {
	if m != nil {
		return m.ScenarioName
	}
	return ""
}

func (m *DefineMessage) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

type ScheduleMessage struct {
	App                  string   `protobuf:"bytes,1,opt,name=App,proto3" json:"App,omitempty"`
	Type                 string   `protobuf:"bytes,2,opt,name=Type,proto3" json:"Type,omitempty"`
	Strategy             string   `protobuf:"bytes,3,opt,name=Strategy,proto3" json:"Strategy,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ScheduleMessage) Reset()         { *m = ScheduleMessage{} }
func (m *ScheduleMessage) String() string { return proto.CompactTextString(m) }
func (*ScheduleMessage) ProtoMessage()    {}
func (*ScheduleMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_744bf7a47b381504, []int{9}
}

func (m *ScheduleMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ScheduleMessage.Unmarshal(m, b)
}
func (m *ScheduleMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ScheduleMessage.Marshal(b, m, deterministic)
}
func (m *ScheduleMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ScheduleMessage.Merge(m, src)
}
func (m *ScheduleMessage) XXX_Size() int {
	return xxx_messageInfo_ScheduleMessage.Size(m)
}
func (m *ScheduleMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ScheduleMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ScheduleMessage proto.InternalMessageInfo

func (m *ScheduleMessage) GetApp() string {
	if m != nil {
		return m.App
	}
	return ""
}

func (m *ScheduleMessage) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ScheduleMessage) GetStrategy() string {
	if m != nil {
		return m.Strategy
	}
	return ""
}

func init() {
	proto.RegisterType((*ListMessage)(nil), "profile.ListMessage")
	proto.RegisterType((*ProfileInfo)(nil), "profile.ProfileInfo")
	proto.RegisterType((*AnalysisMessage)(nil), "profile.AnalysisMessage")
	proto.RegisterType((*Ack)(nil), "profile.Ack")
	proto.RegisterType((*AckCheck)(nil), "profile.AckCheck")
	proto.RegisterType((*ProfileLog)(nil), "profile.ProfileLog")
	proto.RegisterType((*CollectFlag)(nil), "profile.CollectFlag")
	proto.RegisterType((*TrainMessage)(nil), "profile.TrainMessage")
	proto.RegisterType((*DefineMessage)(nil), "profile.DefineMessage")
	proto.RegisterType((*ScheduleMessage)(nil), "profile.ScheduleMessage")
}

func init() { proto.RegisterFile("profile.proto", fileDescriptor_744bf7a47b381504) }

var fileDescriptor_744bf7a47b381504 = []byte{
	// 702 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0x5d, 0x4f, 0xdb, 0x3c,
	0x14, 0x26, 0x29, 0xb4, 0xe5, 0xb4, 0x50, 0x5e, 0x8b, 0x17, 0x45, 0x68, 0x9b, 0x50, 0xae, 0xb8,
	0x42, 0x68, 0x93, 0xf6, 0xa1, 0x0a, 0xa6, 0xac, 0x68, 0x52, 0x27, 0x60, 0xa8, 0x2d, 0x1a, 0xb7,
	0x26, 0x31, 0xa9, 0x15, 0x37, 0x8e, 0x1c, 0x97, 0x89, 0xfd, 0x93, 0xfd, 0x9b, 0xdd, 0xec, 0x7f,
	0x4d, 0x76, 0xec, 0x34, 0xad, 0xda, 0x69, 0xf4, 0x2e, 0xcf, 0xe3, 0xf3, 0x1c, 0x1f, 0x9f, 0xaf,
	0xc0, 0x4e, 0x26, 0xf8, 0x03, 0x65, 0xe4, 0x24, 0x13, 0x5c, 0x72, 0xd4, 0x30, 0xd0, 0x9f, 0x40,
	0xeb, 0x92, 0xe6, 0xf2, 0x8a, 0xe4, 0x39, 0x8e, 0x09, 0xf2, 0xa1, 0xfd, 0x8d, 0x8b, 0x84, 0x71,
	0x1c, 0x8d, 0x9e, 0x32, 0xe2, 0x39, 0x47, 0xce, 0xf1, 0xf6, 0x60, 0x8e, 0x53, 0x36, 0x37, 0x85,
	0xfa, 0x1a, 0x4f, 0x48, 0xee, 0xb9, 0x85, 0x4d, 0x95, 0x43, 0x07, 0x50, 0x0f, 0x42, 0x49, 0x1f,
	0x89, 0x57, 0xd3, 0xa7, 0x06, 0xf9, 0x5d, 0x68, 0x19, 0xbb, 0x7e, 0xfa, 0xc0, 0x11, 0x82, 0x4d,
	0x65, 0x6f, 0xae, 0xd1, 0xdf, 0xc8, 0x83, 0x46, 0x8f, 0xa7, 0x92, 0xa4, 0x52, 0x7b, 0x6e, 0x0f,
	0x2c, 0xf4, 0xbb, 0xd0, 0x09, 0x52, 0xcc, 0x9e, 0x72, 0x9a, 0xdb, 0x78, 0x97, 0x39, 0xd8, 0x87,
	0xad, 0x2b, 0x1e, 0x11, 0x66, 0x02, 0x2b, 0x80, 0xff, 0x12, 0x6a, 0x41, 0x98, 0xa8, 0xc0, 0x86,
	0x12, 0xcb, 0x69, 0x6e, 0x24, 0x06, 0xf9, 0x77, 0xd0, 0x0c, 0xc2, 0xa4, 0x37, 0x26, 0x61, 0xb2,
	0xd4, 0xe9, 0x4c, 0xe7, 0x56, 0x75, 0xe8, 0x08, 0x5a, 0x17, 0x24, 0x0f, 0x05, 0xcd, 0x24, 0xe5,
	0xa9, 0x79, 0x6d, 0x95, 0xf2, 0xef, 0x00, 0xcc, 0x93, 0x2f, 0x79, 0x8c, 0x76, 0xc1, 0xed, 0x47,
	0xda, 0x73, 0x6d, 0xe0, 0xf6, 0x23, 0xf4, 0x02, 0xb6, 0x6d, 0x42, 0x22, 0xe3, 0x7a, 0x46, 0xa8,
	0xd3, 0x11, 0x9d, 0x90, 0x5c, 0xe2, 0x49, 0x66, 0x7c, 0xcf, 0x08, 0xff, 0xb7, 0x03, 0xad, 0x1e,
	0x67, 0x8c, 0x84, 0xf2, 0x33, 0xc3, 0x31, 0x3a, 0x84, 0x66, 0x3f, 0x95, 0x44, 0x3c, 0x62, 0x66,
	0x6e, 0x28, 0xb1, 0x3a, 0xbb, 0x98, 0x0a, 0xac, 0x83, 0x74, 0x8b, 0x33, 0x8b, 0xd5, 0x99, 0x2d,
	0xb0, 0xb9, 0xa4, 0xc4, 0xe8, 0x15, 0xc0, 0xd7, 0xa9, 0xcc, 0xa6, 0xf2, 0x06, 0xcb, 0xb1, 0xb7,
	0xa9, 0x4f, 0x2b, 0x8c, 0x4a, 0xf6, 0x27, 0xc6, 0xc3, 0xc4, 0xdb, 0x2a, 0x92, 0xad, 0x81, 0xaa,
	0xe1, 0x35, 0x91, 0xdf, 0xb9, 0x48, 0xbc, 0xba, 0xe6, 0x2d, 0x54, 0xb9, 0xd5, 0x8d, 0xd5, 0x28,
	0x72, 0xab, 0xbe, 0xfd, 0x2f, 0xd0, 0x1e, 0x09, 0x4c, 0x53, 0x5b, 0x54, 0x15, 0x2b, 0x96, 0x58,
	0xdf, 0x58, 0xd4, 0xa0, 0xc4, 0x0b, 0xf1, 0xb8, 0x8b, 0xf1, 0xf8, 0x3f, 0x1d, 0xd8, 0xb9, 0x20,
	0x0f, 0x34, 0x25, 0xd6, 0xdb, 0x11, 0xb4, 0x86, 0x44, 0x3c, 0xd2, 0x90, 0x54, 0x3a, 0xba, 0x4a,
	0xa1, 0x63, 0xe8, 0x04, 0x59, 0xc6, 0x68, 0xa8, 0xd3, 0xa1, 0x4b, 0x5f, 0x38, 0x5e, 0xa4, 0x55,
	0xeb, 0x0f, 0x43, 0x92, 0x62, 0x41, 0xb9, 0x36, 0x2b, 0xb2, 0x35, 0xc7, 0x55, 0xfb, 0x77, 0x73,
	0xbe, 0x7f, 0x87, 0xd0, 0x19, 0x86, 0x63, 0x12, 0x4d, 0x59, 0x19, 0xdc, 0x1e, 0xd4, 0x82, 0x2c,
	0x33, 0x41, 0xa9, 0xcf, 0x32, 0x41, 0xee, 0x2c, 0x41, 0x2a, 0x21, 0x43, 0x29, 0xb0, 0x24, 0xf1,
	0x93, 0x2d, 0x90, 0xc5, 0xaf, 0x7f, 0x35, 0xca, 0xfe, 0xba, 0x8a, 0x05, 0x7a, 0x0b, 0x0d, 0x83,
	0xd0, 0xfe, 0x89, 0x9d, 0xf9, 0xca, 0xc8, 0x1d, 0xfe, 0x57, 0xb2, 0xb6, 0xdf, 0xfd, 0x8d, 0x53,
	0x07, 0x7d, 0x84, 0x3d, 0x0d, 0xfa, 0x29, 0x95, 0x6b, 0x39, 0xe8, 0x42, 0xd3, 0x0e, 0x27, 0xf2,
	0x66, 0x26, 0xf3, 0xf3, 0xba, 0x4a, 0xfc, 0x0e, 0xea, 0xa3, 0x69, 0x4a, 0xd3, 0xf8, 0x19, 0x77,
	0x1e, 0x3b, 0xa7, 0x0e, 0x3a, 0x87, 0xb6, 0x5a, 0x5f, 0x65, 0xbb, 0x2e, 0x97, 0xcf, 0xd8, 0xca,
	0xae, 0xd3, 0x17, 0x9f, 0xc1, 0xee, 0x6d, 0x16, 0x0b, 0x1c, 0x91, 0xb5, 0x1e, 0x7d, 0x06, 0x2d,
	0x75, 0xfc, 0x77, 0xed, 0x52, 0x56, 0xcb, 0x03, 0x40, 0xda, 0x57, 0xb1, 0x1c, 0xd7, 0x8a, 0xe0,
	0x1c, 0x3a, 0xc6, 0x6a, 0xc0, 0x19, 0xbb, 0xc7, 0x61, 0xf2, 0x6c, 0x7d, 0x6f, 0x8c, 0x55, 0x2f,
	0x09, 0xfa, 0xa3, 0x58, 0x07, 0xcf, 0xd2, 0x7f, 0x00, 0x30, 0x2b, 0x68, 0x5e, 0x5a, 0xd9, 0x4b,
	0xab, 0xa4, 0xef, 0xa1, 0xa9, 0xc7, 0x5e, 0x95, 0xfd, 0xff, 0xd2, 0xa4, 0xba, 0x09, 0x56, 0x29,
	0x4f, 0xa1, 0x5e, 0xcc, 0x38, 0x3a, 0x28, 0x0d, 0xe6, 0x86, 0xfe, 0xb0, 0x5d, 0x15, 0xfa, 0x1b,
	0xe8, 0x44, 0x29, 0x18, 0x91, 0xab, 0xb2, 0xbb, 0xc4, 0xfe, 0x36, 0x8b, 0xf0, 0x3f, 0xdb, 0x77,
	0xa1, 0x69, 0x47, 0xbb, 0xd2, 0xfd, 0x0b, 0xd3, 0xbe, 0xe2, 0x39, 0xf7, 0x75, 0xfd, 0x4f, 0x7e,
	0xf3, 0x27, 0x00, 0x00, 0xff, 0xff, 0xf1, 0x88, 0xa1, 0x70, 0xa4, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ProfileMgrClient is the client API for ProfileMgr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProfileMgrClient interface {
	Profile(ctx context.Context, in *ProfileInfo, opts ...grpc.CallOption) (ProfileMgr_ProfileClient, error)
	CheckInitProfile(ctx context.Context, in *ProfileInfo, opts ...grpc.CallOption) (ProfileMgr_CheckInitProfileClient, error)
	Analysis(ctx context.Context, in *AnalysisMessage, opts ...grpc.CallOption) (ProfileMgr_AnalysisClient, error)
	Tuning(ctx context.Context, opts ...grpc.CallOption) (ProfileMgr_TuningClient, error)
	ListWorkload(ctx context.Context, in *ProfileInfo, opts ...grpc.CallOption) (ProfileMgr_ListWorkloadClient, error)
	UpgradeProfile(ctx context.Context, in *ProfileInfo, opts ...grpc.CallOption) (ProfileMgr_UpgradeProfileClient, error)
	InfoProfile(ctx context.Context, in *ProfileInfo, opts ...grpc.CallOption) (ProfileMgr_InfoProfileClient, error)
	CheckActiveProfile(ctx context.Context, in *ProfileInfo, opts ...grpc.CallOption) (ProfileMgr_CheckActiveProfileClient, error)
	ProfileRollback(ctx context.Context, in *ProfileInfo, opts ...grpc.CallOption) (ProfileMgr_ProfileRollbackClient, error)
	Charaterization(ctx context.Context, in *ProfileInfo, opts ...grpc.CallOption) (ProfileMgr_CharaterizationClient, error)
	Collection(ctx context.Context, in *CollectFlag, opts ...grpc.CallOption) (ProfileMgr_CollectionClient, error)
	Training(ctx context.Context, in *TrainMessage, opts ...grpc.CallOption) (ProfileMgr_TrainingClient, error)
	Define(ctx context.Context, in *DefineMessage, opts ...grpc.CallOption) (*Ack, error)
	Delete(ctx context.Context, in *ProfileInfo, opts ...grpc.CallOption) (*Ack, error)
	Update(ctx context.Context, in *ProfileInfo, opts ...grpc.CallOption) (*Ack, error)
	Schedule(ctx context.Context, in *ScheduleMessage, opts ...grpc.CallOption) (ProfileMgr_ScheduleClient, error)
}

type profileMgrClient struct {
	cc *grpc.ClientConn
}

func NewProfileMgrClient(cc *grpc.ClientConn) ProfileMgrClient {
	return &profileMgrClient{cc}
}

func (c *profileMgrClient) Profile(ctx context.Context, in *ProfileInfo, opts ...grpc.CallOption) (ProfileMgr_ProfileClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ProfileMgr_serviceDesc.Streams[0], "/profile.ProfileMgr/Profile", opts...)
	if err != nil {
		return nil, err
	}
	x := &profileMgrProfileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProfileMgr_ProfileClient interface {
	Recv() (*AckCheck, error)
	grpc.ClientStream
}

type profileMgrProfileClient struct {
	grpc.ClientStream
}

func (x *profileMgrProfileClient) Recv() (*AckCheck, error) {
	m := new(AckCheck)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *profileMgrClient) CheckInitProfile(ctx context.Context, in *ProfileInfo, opts ...grpc.CallOption) (ProfileMgr_CheckInitProfileClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ProfileMgr_serviceDesc.Streams[1], "/profile.ProfileMgr/CheckInitProfile", opts...)
	if err != nil {
		return nil, err
	}
	x := &profileMgrCheckInitProfileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProfileMgr_CheckInitProfileClient interface {
	Recv() (*AckCheck, error)
	grpc.ClientStream
}

type profileMgrCheckInitProfileClient struct {
	grpc.ClientStream
}

func (x *profileMgrCheckInitProfileClient) Recv() (*AckCheck, error) {
	m := new(AckCheck)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *profileMgrClient) Analysis(ctx context.Context, in *AnalysisMessage, opts ...grpc.CallOption) (ProfileMgr_AnalysisClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ProfileMgr_serviceDesc.Streams[2], "/profile.ProfileMgr/Analysis", opts...)
	if err != nil {
		return nil, err
	}
	x := &profileMgrAnalysisClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProfileMgr_AnalysisClient interface {
	Recv() (*AckCheck, error)
	grpc.ClientStream
}

type profileMgrAnalysisClient struct {
	grpc.ClientStream
}

func (x *profileMgrAnalysisClient) Recv() (*AckCheck, error) {
	m := new(AckCheck)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *profileMgrClient) Tuning(ctx context.Context, opts ...grpc.CallOption) (ProfileMgr_TuningClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ProfileMgr_serviceDesc.Streams[3], "/profile.ProfileMgr/Tuning", opts...)
	if err != nil {
		return nil, err
	}
	x := &profileMgrTuningClient{stream}
	return x, nil
}

type ProfileMgr_TuningClient interface {
	Send(*ProfileInfo) error
	Recv() (*AckCheck, error)
	grpc.ClientStream
}

type profileMgrTuningClient struct {
	grpc.ClientStream
}

func (x *profileMgrTuningClient) Send(m *ProfileInfo) error {
	return x.ClientStream.SendMsg(m)
}

func (x *profileMgrTuningClient) Recv() (*AckCheck, error) {
	m := new(AckCheck)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *profileMgrClient) ListWorkload(ctx context.Context, in *ProfileInfo, opts ...grpc.CallOption) (ProfileMgr_ListWorkloadClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ProfileMgr_serviceDesc.Streams[4], "/profile.ProfileMgr/ListWorkload", opts...)
	if err != nil {
		return nil, err
	}
	x := &profileMgrListWorkloadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProfileMgr_ListWorkloadClient interface {
	Recv() (*ListMessage, error)
	grpc.ClientStream
}

type profileMgrListWorkloadClient struct {
	grpc.ClientStream
}

func (x *profileMgrListWorkloadClient) Recv() (*ListMessage, error) {
	m := new(ListMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *profileMgrClient) UpgradeProfile(ctx context.Context, in *ProfileInfo, opts ...grpc.CallOption) (ProfileMgr_UpgradeProfileClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ProfileMgr_serviceDesc.Streams[5], "/profile.ProfileMgr/UpgradeProfile", opts...)
	if err != nil {
		return nil, err
	}
	x := &profileMgrUpgradeProfileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProfileMgr_UpgradeProfileClient interface {
	Recv() (*AckCheck, error)
	grpc.ClientStream
}

type profileMgrUpgradeProfileClient struct {
	grpc.ClientStream
}

func (x *profileMgrUpgradeProfileClient) Recv() (*AckCheck, error) {
	m := new(AckCheck)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *profileMgrClient) InfoProfile(ctx context.Context, in *ProfileInfo, opts ...grpc.CallOption) (ProfileMgr_InfoProfileClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ProfileMgr_serviceDesc.Streams[6], "/profile.ProfileMgr/InfoProfile", opts...)
	if err != nil {
		return nil, err
	}
	x := &profileMgrInfoProfileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProfileMgr_InfoProfileClient interface {
	Recv() (*ProfileInfo, error)
	grpc.ClientStream
}

type profileMgrInfoProfileClient struct {
	grpc.ClientStream
}

func (x *profileMgrInfoProfileClient) Recv() (*ProfileInfo, error) {
	m := new(ProfileInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *profileMgrClient) CheckActiveProfile(ctx context.Context, in *ProfileInfo, opts ...grpc.CallOption) (ProfileMgr_CheckActiveProfileClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ProfileMgr_serviceDesc.Streams[7], "/profile.ProfileMgr/CheckActiveProfile", opts...)
	if err != nil {
		return nil, err
	}
	x := &profileMgrCheckActiveProfileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProfileMgr_CheckActiveProfileClient interface {
	Recv() (*AckCheck, error)
	grpc.ClientStream
}

type profileMgrCheckActiveProfileClient struct {
	grpc.ClientStream
}

func (x *profileMgrCheckActiveProfileClient) Recv() (*AckCheck, error) {
	m := new(AckCheck)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *profileMgrClient) ProfileRollback(ctx context.Context, in *ProfileInfo, opts ...grpc.CallOption) (ProfileMgr_ProfileRollbackClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ProfileMgr_serviceDesc.Streams[8], "/profile.ProfileMgr/ProfileRollback", opts...)
	if err != nil {
		return nil, err
	}
	x := &profileMgrProfileRollbackClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProfileMgr_ProfileRollbackClient interface {
	Recv() (*AckCheck, error)
	grpc.ClientStream
}

type profileMgrProfileRollbackClient struct {
	grpc.ClientStream
}

func (x *profileMgrProfileRollbackClient) Recv() (*AckCheck, error) {
	m := new(AckCheck)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *profileMgrClient) Charaterization(ctx context.Context, in *ProfileInfo, opts ...grpc.CallOption) (ProfileMgr_CharaterizationClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ProfileMgr_serviceDesc.Streams[9], "/profile.ProfileMgr/Charaterization", opts...)
	if err != nil {
		return nil, err
	}
	x := &profileMgrCharaterizationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProfileMgr_CharaterizationClient interface {
	Recv() (*AckCheck, error)
	grpc.ClientStream
}

type profileMgrCharaterizationClient struct {
	grpc.ClientStream
}

func (x *profileMgrCharaterizationClient) Recv() (*AckCheck, error) {
	m := new(AckCheck)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *profileMgrClient) Collection(ctx context.Context, in *CollectFlag, opts ...grpc.CallOption) (ProfileMgr_CollectionClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ProfileMgr_serviceDesc.Streams[10], "/profile.ProfileMgr/Collection", opts...)
	if err != nil {
		return nil, err
	}
	x := &profileMgrCollectionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProfileMgr_CollectionClient interface {
	Recv() (*AckCheck, error)
	grpc.ClientStream
}

type profileMgrCollectionClient struct {
	grpc.ClientStream
}

func (x *profileMgrCollectionClient) Recv() (*AckCheck, error) {
	m := new(AckCheck)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *profileMgrClient) Training(ctx context.Context, in *TrainMessage, opts ...grpc.CallOption) (ProfileMgr_TrainingClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ProfileMgr_serviceDesc.Streams[11], "/profile.ProfileMgr/Training", opts...)
	if err != nil {
		return nil, err
	}
	x := &profileMgrTrainingClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProfileMgr_TrainingClient interface {
	Recv() (*AckCheck, error)
	grpc.ClientStream
}

type profileMgrTrainingClient struct {
	grpc.ClientStream
}

func (x *profileMgrTrainingClient) Recv() (*AckCheck, error) {
	m := new(AckCheck)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *profileMgrClient) Define(ctx context.Context, in *DefineMessage, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/profile.ProfileMgr/Define", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileMgrClient) Delete(ctx context.Context, in *ProfileInfo, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/profile.ProfileMgr/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileMgrClient) Update(ctx context.Context, in *ProfileInfo, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/profile.ProfileMgr/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileMgrClient) Schedule(ctx context.Context, in *ScheduleMessage, opts ...grpc.CallOption) (ProfileMgr_ScheduleClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ProfileMgr_serviceDesc.Streams[12], "/profile.ProfileMgr/Schedule", opts...)
	if err != nil {
		return nil, err
	}
	x := &profileMgrScheduleClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProfileMgr_ScheduleClient interface {
	Recv() (*AckCheck, error)
	grpc.ClientStream
}

type profileMgrScheduleClient struct {
	grpc.ClientStream
}

func (x *profileMgrScheduleClient) Recv() (*AckCheck, error) {
	m := new(AckCheck)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProfileMgrServer is the server API for ProfileMgr service.
type ProfileMgrServer interface {
	Profile(*ProfileInfo, ProfileMgr_ProfileServer) error
	CheckInitProfile(*ProfileInfo, ProfileMgr_CheckInitProfileServer) error
	Analysis(*AnalysisMessage, ProfileMgr_AnalysisServer) error
	Tuning(ProfileMgr_TuningServer) error
	ListWorkload(*ProfileInfo, ProfileMgr_ListWorkloadServer) error
	UpgradeProfile(*ProfileInfo, ProfileMgr_UpgradeProfileServer) error
	InfoProfile(*ProfileInfo, ProfileMgr_InfoProfileServer) error
	CheckActiveProfile(*ProfileInfo, ProfileMgr_CheckActiveProfileServer) error
	ProfileRollback(*ProfileInfo, ProfileMgr_ProfileRollbackServer) error
	Charaterization(*ProfileInfo, ProfileMgr_CharaterizationServer) error
	Collection(*CollectFlag, ProfileMgr_CollectionServer) error
	Training(*TrainMessage, ProfileMgr_TrainingServer) error
	Define(context.Context, *DefineMessage) (*Ack, error)
	Delete(context.Context, *ProfileInfo) (*Ack, error)
	Update(context.Context, *ProfileInfo) (*Ack, error)
	Schedule(*ScheduleMessage, ProfileMgr_ScheduleServer) error
}

// UnimplementedProfileMgrServer can be embedded to have forward compatible implementations.
type UnimplementedProfileMgrServer struct {
}

func (*UnimplementedProfileMgrServer) Profile(req *ProfileInfo, srv ProfileMgr_ProfileServer) error {
	return status.Errorf(codes.Unimplemented, "method Profile not implemented")
}
func (*UnimplementedProfileMgrServer) CheckInitProfile(req *ProfileInfo, srv ProfileMgr_CheckInitProfileServer) error {
	return status.Errorf(codes.Unimplemented, "method CheckInitProfile not implemented")
}
func (*UnimplementedProfileMgrServer) Analysis(req *AnalysisMessage, srv ProfileMgr_AnalysisServer) error {
	return status.Errorf(codes.Unimplemented, "method Analysis not implemented")
}
func (*UnimplementedProfileMgrServer) Tuning(srv ProfileMgr_TuningServer) error {
	return status.Errorf(codes.Unimplemented, "method Tuning not implemented")
}
func (*UnimplementedProfileMgrServer) ListWorkload(req *ProfileInfo, srv ProfileMgr_ListWorkloadServer) error {
	return status.Errorf(codes.Unimplemented, "method ListWorkload not implemented")
}
func (*UnimplementedProfileMgrServer) UpgradeProfile(req *ProfileInfo, srv ProfileMgr_UpgradeProfileServer) error {
	return status.Errorf(codes.Unimplemented, "method UpgradeProfile not implemented")
}
func (*UnimplementedProfileMgrServer) InfoProfile(req *ProfileInfo, srv ProfileMgr_InfoProfileServer) error {
	return status.Errorf(codes.Unimplemented, "method InfoProfile not implemented")
}
func (*UnimplementedProfileMgrServer) CheckActiveProfile(req *ProfileInfo, srv ProfileMgr_CheckActiveProfileServer) error {
	return status.Errorf(codes.Unimplemented, "method CheckActiveProfile not implemented")
}
func (*UnimplementedProfileMgrServer) ProfileRollback(req *ProfileInfo, srv ProfileMgr_ProfileRollbackServer) error {
	return status.Errorf(codes.Unimplemented, "method ProfileRollback not implemented")
}
func (*UnimplementedProfileMgrServer) Charaterization(req *ProfileInfo, srv ProfileMgr_CharaterizationServer) error {
	return status.Errorf(codes.Unimplemented, "method Charaterization not implemented")
}
func (*UnimplementedProfileMgrServer) Collection(req *CollectFlag, srv ProfileMgr_CollectionServer) error {
	return status.Errorf(codes.Unimplemented, "method Collection not implemented")
}
func (*UnimplementedProfileMgrServer) Training(req *TrainMessage, srv ProfileMgr_TrainingServer) error {
	return status.Errorf(codes.Unimplemented, "method Training not implemented")
}
func (*UnimplementedProfileMgrServer) Define(ctx context.Context, req *DefineMessage) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Define not implemented")
}
func (*UnimplementedProfileMgrServer) Delete(ctx context.Context, req *ProfileInfo) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedProfileMgrServer) Update(ctx context.Context, req *ProfileInfo) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedProfileMgrServer) Schedule(req *ScheduleMessage, srv ProfileMgr_ScheduleServer) error {
	return status.Errorf(codes.Unimplemented, "method Schedule not implemented")
}

func RegisterProfileMgrServer(s *grpc.Server, srv ProfileMgrServer) {
	s.RegisterService(&_ProfileMgr_serviceDesc, srv)
}

func _ProfileMgr_Profile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ProfileInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProfileMgrServer).Profile(m, &profileMgrProfileServer{stream})
}

type ProfileMgr_ProfileServer interface {
	Send(*AckCheck) error
	grpc.ServerStream
}

type profileMgrProfileServer struct {
	grpc.ServerStream
}

func (x *profileMgrProfileServer) Send(m *AckCheck) error {
	return x.ServerStream.SendMsg(m)
}

func _ProfileMgr_CheckInitProfile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ProfileInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProfileMgrServer).CheckInitProfile(m, &profileMgrCheckInitProfileServer{stream})
}

type ProfileMgr_CheckInitProfileServer interface {
	Send(*AckCheck) error
	grpc.ServerStream
}

type profileMgrCheckInitProfileServer struct {
	grpc.ServerStream
}

func (x *profileMgrCheckInitProfileServer) Send(m *AckCheck) error {
	return x.ServerStream.SendMsg(m)
}

func _ProfileMgr_Analysis_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AnalysisMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProfileMgrServer).Analysis(m, &profileMgrAnalysisServer{stream})
}

type ProfileMgr_AnalysisServer interface {
	Send(*AckCheck) error
	grpc.ServerStream
}

type profileMgrAnalysisServer struct {
	grpc.ServerStream
}

func (x *profileMgrAnalysisServer) Send(m *AckCheck) error {
	return x.ServerStream.SendMsg(m)
}

func _ProfileMgr_Tuning_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProfileMgrServer).Tuning(&profileMgrTuningServer{stream})
}

type ProfileMgr_TuningServer interface {
	Send(*AckCheck) error
	Recv() (*ProfileInfo, error)
	grpc.ServerStream
}

type profileMgrTuningServer struct {
	grpc.ServerStream
}

func (x *profileMgrTuningServer) Send(m *AckCheck) error {
	return x.ServerStream.SendMsg(m)
}

func (x *profileMgrTuningServer) Recv() (*ProfileInfo, error) {
	m := new(ProfileInfo)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ProfileMgr_ListWorkload_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ProfileInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProfileMgrServer).ListWorkload(m, &profileMgrListWorkloadServer{stream})
}

type ProfileMgr_ListWorkloadServer interface {
	Send(*ListMessage) error
	grpc.ServerStream
}

type profileMgrListWorkloadServer struct {
	grpc.ServerStream
}

func (x *profileMgrListWorkloadServer) Send(m *ListMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _ProfileMgr_UpgradeProfile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ProfileInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProfileMgrServer).UpgradeProfile(m, &profileMgrUpgradeProfileServer{stream})
}

type ProfileMgr_UpgradeProfileServer interface {
	Send(*AckCheck) error
	grpc.ServerStream
}

type profileMgrUpgradeProfileServer struct {
	grpc.ServerStream
}

func (x *profileMgrUpgradeProfileServer) Send(m *AckCheck) error {
	return x.ServerStream.SendMsg(m)
}

func _ProfileMgr_InfoProfile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ProfileInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProfileMgrServer).InfoProfile(m, &profileMgrInfoProfileServer{stream})
}

type ProfileMgr_InfoProfileServer interface {
	Send(*ProfileInfo) error
	grpc.ServerStream
}

type profileMgrInfoProfileServer struct {
	grpc.ServerStream
}

func (x *profileMgrInfoProfileServer) Send(m *ProfileInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _ProfileMgr_CheckActiveProfile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ProfileInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProfileMgrServer).CheckActiveProfile(m, &profileMgrCheckActiveProfileServer{stream})
}

type ProfileMgr_CheckActiveProfileServer interface {
	Send(*AckCheck) error
	grpc.ServerStream
}

type profileMgrCheckActiveProfileServer struct {
	grpc.ServerStream
}

func (x *profileMgrCheckActiveProfileServer) Send(m *AckCheck) error {
	return x.ServerStream.SendMsg(m)
}

func _ProfileMgr_ProfileRollback_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ProfileInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProfileMgrServer).ProfileRollback(m, &profileMgrProfileRollbackServer{stream})
}

type ProfileMgr_ProfileRollbackServer interface {
	Send(*AckCheck) error
	grpc.ServerStream
}

type profileMgrProfileRollbackServer struct {
	grpc.ServerStream
}

func (x *profileMgrProfileRollbackServer) Send(m *AckCheck) error {
	return x.ServerStream.SendMsg(m)
}

func _ProfileMgr_Charaterization_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ProfileInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProfileMgrServer).Charaterization(m, &profileMgrCharaterizationServer{stream})
}

type ProfileMgr_CharaterizationServer interface {
	Send(*AckCheck) error
	grpc.ServerStream
}

type profileMgrCharaterizationServer struct {
	grpc.ServerStream
}

func (x *profileMgrCharaterizationServer) Send(m *AckCheck) error {
	return x.ServerStream.SendMsg(m)
}

func _ProfileMgr_Collection_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CollectFlag)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProfileMgrServer).Collection(m, &profileMgrCollectionServer{stream})
}

type ProfileMgr_CollectionServer interface {
	Send(*AckCheck) error
	grpc.ServerStream
}

type profileMgrCollectionServer struct {
	grpc.ServerStream
}

func (x *profileMgrCollectionServer) Send(m *AckCheck) error {
	return x.ServerStream.SendMsg(m)
}

func _ProfileMgr_Training_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TrainMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProfileMgrServer).Training(m, &profileMgrTrainingServer{stream})
}

type ProfileMgr_TrainingServer interface {
	Send(*AckCheck) error
	grpc.ServerStream
}

type profileMgrTrainingServer struct {
	grpc.ServerStream
}

func (x *profileMgrTrainingServer) Send(m *AckCheck) error {
	return x.ServerStream.SendMsg(m)
}

func _ProfileMgr_Define_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DefineMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileMgrServer).Define(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profile.ProfileMgr/Define",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileMgrServer).Define(ctx, req.(*DefineMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileMgr_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileMgrServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profile.ProfileMgr/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileMgrServer).Delete(ctx, req.(*ProfileInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileMgr_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileMgrServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profile.ProfileMgr/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileMgrServer).Update(ctx, req.(*ProfileInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileMgr_Schedule_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ScheduleMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProfileMgrServer).Schedule(m, &profileMgrScheduleServer{stream})
}

type ProfileMgr_ScheduleServer interface {
	Send(*AckCheck) error
	grpc.ServerStream
}

type profileMgrScheduleServer struct {
	grpc.ServerStream
}

func (x *profileMgrScheduleServer) Send(m *AckCheck) error {
	return x.ServerStream.SendMsg(m)
}

var _ProfileMgr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "profile.ProfileMgr",
	HandlerType: (*ProfileMgrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Define",
			Handler:    _ProfileMgr_Define_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ProfileMgr_Delete_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ProfileMgr_Update_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Profile",
			Handler:       _ProfileMgr_Profile_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CheckInitProfile",
			Handler:       _ProfileMgr_CheckInitProfile_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Analysis",
			Handler:       _ProfileMgr_Analysis_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Tuning",
			Handler:       _ProfileMgr_Tuning_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ListWorkload",
			Handler:       _ProfileMgr_ListWorkload_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UpgradeProfile",
			Handler:       _ProfileMgr_UpgradeProfile_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "InfoProfile",
			Handler:       _ProfileMgr_InfoProfile_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CheckActiveProfile",
			Handler:       _ProfileMgr_CheckActiveProfile_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ProfileRollback",
			Handler:       _ProfileMgr_ProfileRollback_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Charaterization",
			Handler:       _ProfileMgr_Charaterization_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Collection",
			Handler:       _ProfileMgr_Collection_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Training",
			Handler:       _ProfileMgr_Training_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Schedule",
			Handler:       _ProfileMgr_Schedule_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "profile.proto",
}
